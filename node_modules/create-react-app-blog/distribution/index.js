'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (React, IndexRoute, Link, Route, Helmet) {
  var webpackRequireContext = require.context('!markdown-with-front-matter!./../../../src/_posts', false, /\.md$/);

  var blogs = webpackRequireContext.keys().sort().reverse().reduce(function (memo, fileName) {
    // frontmatter and content (actual markdown is loaded on '__content', frontmatter is right on root)
    var frontMatterMarkdown = webpackRequireContext(fileName);
    // remove cd and extension
    fileName = fileName.match(/\.\/([^\.]+)\.*/)[1];
    // extract year and path
    var tokenizedFilename = fileName.match(/^(\d{4}-\d{2}-\d{2})(.*)/);
    // validation
    if (!tokenizedFilename && !tokenizedFilename[1]) throw new Error('no ^YYYY-MM-DD date in blog filename');

    var date = tokenizedFilename[1];
    var jekyllPath = date.split('-').join('/') + tokenizedFilename[2].replace(/^-/, '/');

    return memo.set(jekyllPath, Object.assign({ date: date }, frontMatterMarkdown));
  }, new Map());

  var reactRoutes = [].concat(_toConsumableArray(blogs.keys())).map(function (path) {
    return React.createElement(Route, { key: path, path: path, component: blogWrapper(React, Helmet, Link, blogs.get(path)) });
  });

  reactRoutes.push(React.createElement(IndexRoute, { key: 'index', component: blogIndex(React, Link, blogs) }));

  return reactRoutes;
};

require('github-markdown-css');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var blogWrapper = function blogWrapper(React, Helmet, Link, _ref) {
  var __content = _ref.__content;
  var title = _ref.title;
  var description = _ref.description;
  var og = _ref.og;
  return function () {
    return React.createElement(
      'section',
      null,
      React.createElement(Helmet, {
        title: title,
        meta: [{ 'name': 'description', 'content': description }, { 'property': 'og:type', 'content': 'article' }, { 'property': 'og:title', 'content': title }, { 'property': 'og:description', 'content': description }, { 'property': 'og:image', 'content': og && og['image'] }, { 'property': 'og:image:width', 'content': og && og['image:width'] }, { 'property': 'og:image:height', 'content': og && og['image:height'] }]
      }),
      React.createElement(
        'small',
        null,
        React.createElement(
          Link,
          { to: '/blog' },
          '\xAB Back to blog'
        )
      ),
      React.createElement(
        'div',
        null,
        React.createElement(
          'article',
          null,
          React.createElement('div', { className: 'markdown-body', dangerouslySetInnerHTML: { __html: __content } })
        )
      )
    );
  };
};

var blogIndex = function blogIndex(React, Link, blogs) {
  return function () {
    return React.createElement(
      'section',
      null,
      React.createElement(
        'h1',
        null,
        'Blog'
      ),
      React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          null,
          React.createElement(
            'ul',
            null,
            [].concat(_toConsumableArray(blogs.keys())).map(function (path) {
              var fullPath = '/blog/' + path;
              var title = blogs.get(path).title || path;
              return React.createElement(
                'li',
                { key: path },
                React.createElement(
                  'span',
                  { style: { 'fontSize': 'small' } },
                  blogs.get(path).date
                ),
                React.createElement(
                  'h2',
                  { style: { 'marginTop': '0.1em' } },
                  React.createElement(
                    Link,
                    { to: fullPath },
                    title
                  )
                )
              );
            })
          )
        )
      )
    );
  };
};